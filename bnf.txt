<statement> -> { <statement> }
| { <expression> }

<expression> -> <expression> <binary-operator> <exrpession>
| <unary-operator> <expression>
| <expression> <unary-operator>
| <token>

<unary-operator> -> + | - | & 

<binary-operator> -> + | - | * | / |  ||||||||||...

<if> -> if ( condition ) ( statement-true | expression-true )
| if ( condition ) ( statement-true | expression-true; ) else ( statement-false | expression-false )

<while> -> while( condition ) ( loop_statement | loop_expression )

<for> -> for( <range-declaration> in <range-expression> ) ( <loop-statement> | <loop-expression> )

<rfor> -> rfor( <range-declaration> in <range-expression> ) ( <loop-statement> | <loop-expression> )

<import> -> import <module-name>

<return> -> return <expression>(optional)

<break> -> break <label-name>(optional)

<continue> -> continue <label-name>(optional)


<variable> -> ( const | mut ) variable_name :<type>(optional) = init_expression(optional)

<literal> -> literal <literal-name> = <expression>

<function> -> func func_name(<parameter-list>) ->return-type(optional) { body }

<parameter-list> -> void | (const|mut) param-name :<type> , ...

<class> -> class class-name inhertance-class(optional) 
{ member_specification }

<class-member> ->
<method> |
<variable>

<closure> -> $(parameter-list) ->return_type(optional) { body }
